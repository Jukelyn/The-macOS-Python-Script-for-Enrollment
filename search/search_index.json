{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Instructions","text":"<ul> <li><code>python -m venv venv</code> - Creates the virtual enviornment</li> <li><code>source venv/bin/activate</code> - Activates the virtual enviornment</li> <li><code>pip install -r requirements.txt</code> - Installs dependencies for the program</li> <li><code>python main.py</code> - Runs the program.</li> </ul> <p>This program provides a GUI for gathering user input for enrollment.</p> <p>The program uses the CustomTkinter library to display a series of pages:</p> <ol> <li> <p>Acknowledgement Page: A message asking the user to acknowledge and    proceed with the input process.</p> </li> <li> <p>Name Input Page: Prompts the user to enter their first and last names.</p> </li> <li> <p>Department and Building Selection Page: Allows the user to select their    department and building from predefined dropdown options.</p> </li> <li> <p>Save and Submit: After gathering the necessary information, the data is    saved into a text file.</p> </li> </ol> <p>Key notes:</p> <ul> <li>The GUI elements (labels, entry fields, dropdowns, buttons) are dynamically   scaled based on a scaling factor for better accessibility.</li> <li>Data is currenly saved in a text file with a timestamp and the user's input.</li> <li>The program is intended for use on macOS with Python v3.9 or higher.</li> </ul> <p>The program also includes helper functions for refreshing the window, clearing widgets, and centering the window on the screen.</p> <p>Dependencies:</p> <ul> <li>CustomTkinter for the GUI components.</li> <li>Pillow for image processing (background and banner images)</li> <li>Callable for typehinting</li> <li>strftime and subprocess for handling time formatting and executing system   commands.</li> </ul> <p>This project was made possible by Mehraz Ahmed with the help of Imraan Khan.</p>"},{"location":"#main.scale","title":"<code>scale(value)</code>","text":"<p>Scales a given value by a predefined scaling factor.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value to be scaled.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The scaled value, rounded down to the nearest integer.</p> Source code in <code>main.py</code> Python<pre><code>def scale(value):\n    \"\"\"\n    Scales a given value by a predefined scaling factor.\n\n    Args:\n        value (float): The value to be scaled.\n\n    Returns:\n        int: The scaled value, rounded down to the nearest integer.\n    \"\"\"\n    return int(value * SCALING_FACTOR)\n</code></pre>"},{"location":"#main.get_font","title":"<code>get_font(scaling, bold=False)</code>","text":"<p>Retrieve font configuration based on scaling and style.</p> <p>Parameters:</p> Name Type Description Default <code>scaling</code> <code>int</code> <p>A scaling factor to adjust the font size.</p> required <code>bold</code> <code>bool</code> <p>Whether the font should be bold.                    Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[str, int, str]</code> <p>tuple[str, int, str]: A tuple containing the font name,                   the scaled size, and an optional style                   string (e.g., \"bold\").</p> Source code in <code>main.py</code> Python<pre><code>def get_font(scaling: int, bold: bool = False) -&gt; tuple[str, int, str]:\n    \"\"\"\n    Retrieve font configuration based on scaling and style.\n\n    Args:\n        scaling (int): A scaling factor to adjust the font size.\n        bold (bool, optional): Whether the font should be bold.\n                               Defaults to False.\n\n    Returns:\n        tuple[str, int, str]: A tuple containing the font name,\n                              the scaled size, and an optional style\n                              string (e.g., \"bold\").\n    \"\"\"\n    if bold:\n        return (BASE_FONT, scale(scaling), \"normal\")\n\n    return (BASE_FONT, scale(scaling), \"bold\")\n</code></pre>"},{"location":"#main.get_buildings_list","title":"<code>get_buildings_list(filename)</code>","text":"<p>Reads lines from text file and returns a list of the contents.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The file name to parse</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of parsed information</p> Source code in <code>main.py</code> Python<pre><code>def get_buildings_list(filename: str) -&gt; list[str]:\n    \"\"\"Reads lines from text file and returns a list of the contents.\n\n    Args:\n        filename (str): The file name to parse\n\n    Returns:\n        list[str]: List of parsed information\n    \"\"\"\n    info_list = []\n\n    with open(filename, \"r\", encoding=\"utf-8\") as file:\n        for line in file:\n            if line.strip() != \"\":\n                info_list.append(line.strip())\n\n    return sorted(info_list)\n</code></pre>"},{"location":"#main.load_background","title":"<code>load_background(tk, image_path)</code>","text":"<p>Load and scale an image to fit the dimensions of a CTk window.</p> <p>Parameters:</p> Name Type Description Default <code>tk</code> <code>CTk</code> <p>The CTk instance whose dimensions are used           for scaling the image.</p> required <code>image_path</code> <code>str</code> <p>The file path of the image to be loaded.</p> required <p>Returns:</p> Name Type Description <code>CTkImage</code> <p>A CTkImage object resized to fit the window dimensions.</p> Source code in <code>main.py</code> Python<pre><code>def load_background(tk: ctk.CTk, image_path: str):\n    \"\"\"\n    Load and scale an image to fit the dimensions of a CTk window.\n\n    Args:\n        tk (ctk.CTk): The CTk instance whose dimensions are used\n                      for scaling the image.\n        image_path (str): The file path of the image to be loaded.\n\n    Returns:\n        CTkImage: A CTkImage object resized to fit the window dimensions.\n    \"\"\"\n    img = Image.open(image_path)\n    width = tk.winfo_width()\n    height = tk.winfo_height()\n\n    return CTkImage(img, size=(width, height))\n</code></pre>"},{"location":"#main.load_banner","title":"<code>load_banner(image_path)</code>","text":"<p>Load and resize an image to create a banner.</p> <p>Parameters:</p> Name Type Description Default <code>image_path</code> <code>str</code> <p>The file path of the image to be loaded.</p> required <p>Returns:</p> Name Type Description <code>CTkImage</code> <p>A CTkImage object resized to half of its original dimensions.</p> Source code in <code>main.py</code> Python<pre><code>def load_banner(image_path: str):\n    \"\"\"\n    Load and resize an image to create a banner.\n\n    Args:\n        image_path (str): The file path of the image to be loaded.\n\n    Returns:\n        CTkImage: A CTkImage object resized to half of its original dimensions.\n    \"\"\"\n    img = Image.open(image_path)\n    width, height = img.size\n    # resized_img = img.resize(\n    #     (int(width * 0.5), int(height * 0.5)), Image.Resampling.LANCZOS)\n    return CTkImage(img, size=(int(width * 0.5), int(height * 0.5)))\n</code></pre>"},{"location":"#main.refresh_window","title":"<code>refresh_window()</code>","text":"<p>Refresh the program window by updating its tasks and rendering. This ensures that any pending updates to the UI are processed immediately.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This function does not return a value.</p> Source code in <code>main.py</code> Python<pre><code>def refresh_window() -&gt; None:\n    \"\"\"\n    Refresh the program window by updating its tasks and rendering. This\n    ensures that any pending updates to the UI are processed immediately.\n\n    Returns:\n        None: This function does not return a value.\n    \"\"\"\n    root.update_idletasks()\n    root.update()\n</code></pre>"},{"location":"#main.clear_root","title":"<code>clear_root()</code>","text":"<p>Clear all widgets from the root window. Removes all child widgets managed by the pack geometry manager and refreshes the window to reflect the changes.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This function does not return a value.</p> Source code in <code>main.py</code> Python<pre><code>def clear_root() -&gt; None:\n    \"\"\"\n    Clear all widgets from the root window. Removes all child widgets managed\n    by the pack geometry manager and refreshes the window to reflect the\n    changes.\n\n    Returns:\n        None: This function does not return a value.\n    \"\"\"\n    for widget in root.pack_slaves():\n        widget.destroy()\n\n    refresh_window()\n</code></pre>"},{"location":"#main.get_name_label","title":"<code>get_name_label(working_frame, name_part)</code>","text":"<p>Create and returns a label widget for a name input field.</p> <p>Parameters:</p> Name Type Description Default <code>working_frame</code> <code>CTkFrame</code> <p>The frame in which the label will be                           placed.</p> required <code>name_part</code> <code>str</code> <p>The part of the name (e.g., \"First\", \"Last\") to              display in the label.</p> required <p>Returns:</p> Type Description <code>CTkLabel</code> <p>ctk.CTkLabel: The created label widget with the specified text and           styling.</p> Source code in <code>main.py</code> Python<pre><code>def get_name_label(working_frame: ctk.CTkFrame,\n                   name_part: str) -&gt; ctk.CTkLabel:\n    \"\"\"\n    Create and returns a label widget for a name input field.\n\n    Args:\n        working_frame (ctk.CTkFrame): The frame in which the label will be\n                                      placed.\n        name_part (str): The part of the name (e.g., \"First\", \"Last\") to\n                         display in the label.\n\n    Returns:\n        ctk.CTkLabel: The created label widget with the specified text and\n                      styling.\n    \"\"\"\n    text = f\"{name_part} Name:\"\n    label = ctk.CTkLabel(working_frame, text=text,\n                         font=get_font(STANDARD_FONT_SIZE),\n                         fg_color=\"transparent\")\n    return label\n</code></pre>"},{"location":"#main.grid_position","title":"<code>grid_position(current_widget, row, col)</code>","text":"<p>Places widgets in a grid layout with scaling and padding.</p> <p>Parameters:</p> Name Type Description Default <code>current_widget</code> <p>The widget to be placed in the grid.</p> required <code>row</code> <code>int</code> <p>The row index in the grid layout.</p> required <code>col</code> <code>int</code> <p>The column index in the grid layout.</p> required <p>Returns:</p> Name Type Description <code>None</code> <p>This function places the widget in the grid and does not return   a value.</p> Source code in <code>main.py</code> Python<pre><code>def grid_position(current_widget, row: int, col: int):\n    \"\"\"\n    Places widgets in a grid layout with scaling and padding.\n\n    Args:\n        current_widget: The widget to be placed in the grid.\n        row (int): The row index in the grid layout.\n        col (int): The column index in the grid layout.\n\n    Returns:\n        None: This function places the widget in the grid and does not return\n              a value.\n    \"\"\"\n    sticky = \"e\" if isinstance(current_widget, ctk.CTkLabel) else \"\"\n    return current_widget.grid(row=row, column=col,\n                               padx=scale(DISTANCE_BETWEEN_ENTRY_X),\n                               pady=scale(DISTANCE_BETWEEN_ENTRY_Y),\n                               sticky=sticky)\n</code></pre>"},{"location":"#main.get_entry_field","title":"<code>get_entry_field(current_frame, name_part)</code>","text":"<p>Create and returns an entry field widget for user input.</p> <p>Parameters:</p> Name Type Description Default <code>current_frame</code> <code>CTkFrame</code> <p>The frame in which the entry field will                           be placed.</p> required <code>name_part</code> <code>str</code> <p>The part of the name (e.g., \"First\", \"Last\") to be              used as a placeholder text.</p> required <p>Returns:</p> Type Description <code>CTkEntry</code> <p>ctk.CTkEntry: The created entry field widget with the specified           placeholder text and styling.</p> Source code in <code>main.py</code> Python<pre><code>def get_entry_field(current_frame: ctk.CTkFrame,\n                    name_part: str) -&gt; ctk.CTkEntry:\n    \"\"\"\n    Create and returns an entry field widget for user input.\n\n    Args:\n        current_frame (ctk.CTkFrame): The frame in which the entry field will\n                                      be placed.\n        name_part (str): The part of the name (e.g., \"First\", \"Last\") to be\n                         used as a placeholder text.\n\n    Returns:\n        ctk.CTkEntry: The created entry field widget with the specified\n                      placeholder text and styling.\n    \"\"\"\n\n    return ctk.CTkEntry(current_frame, font=get_font(SMALL_FONT_SIZE),\n                        fg_color=\"transparent\",\n                        placeholder_text=f\"{name_part} name\")\n</code></pre>"},{"location":"#main.make_button","title":"<code>make_button(current_frame, text, command)</code>","text":"<p>Create a button widget and adds it to the specified frame.</p> <p>Parameters:</p> Name Type Description Default <code>current_frame</code> <code>CTkFrame</code> <p>The frame in which the button will be                           placed.</p> required <code>text</code> <code>str</code> <p>The text to display on the button.</p> required <code>command</code> <code>Callable[[], None]</code> <p>The function to be called when the                           button is clicked.</p> required <p>Returns:</p> Type Description <code>CTkButton</code> <p>ctk.CTkButton: The created button widget with the specified text,            command, and styling.</p> Source code in <code>main.py</code> Python<pre><code>def make_button(current_frame: ctk.CTkFrame, text: str,\n                command: Callable[[], None]) -&gt; ctk.CTkButton:\n    \"\"\"\n    Create a button widget and adds it to the specified frame.\n\n    Args:\n        current_frame (ctk.CTkFrame): The frame in which the button will be\n                                      placed.\n        text (str): The text to display on the button.\n        command (Callable[[], None]): The function to be called when the\n                                      button is clicked.\n\n    Returns:\n        ctk.CTkButton: The created button widget with the specified text,\n                       command, and styling.\n    \"\"\"\n    return ctk.CTkButton(current_frame, text=text,\n                         font=get_font(SMALLER_FONT_SIZE),\n                         command=command, corner_radius=16,\n                         border_width=3, border_color=\"black\",\n                         border_spacing=7, anchor=\"center\"\n                         )\n</code></pre>"},{"location":"#main.name_input_page","title":"<code>name_input_page()</code>","text":"<p>Display the page for entering the user's first and last name, and handles navigation to the next page.</p> <p>This function clears the root window, creates the necessary input fields for the user's first and last name, and adds a button to proceed to the next page after validating that both names have been entered.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This function does not return a value.</p> Source code in <code>main.py</code> Python<pre><code>def name_input_page() -&gt; None:\n    \"\"\"\n    Display the page for entering the user's first and last name, and handles\n    navigation to the next page.\n\n    This function clears the root window, creates the necessary input fields\n    for the user's first and last name, and adds a button to proceed to the\n    next page after validating that both names have been entered.\n\n    Returns:\n        None: This function does not return a value.\n    \"\"\"\n    clear_root()\n\n    name_input_frame = ctk.CTkFrame(root)\n    name_input_frame.pack(expand=True)\n\n    # bg = load_background(root, BACKGROUND_PATH)\n    # bg_label = ctk.CTkLabel(root, text=\"\", image=bg)\n    # bg_label.place(x=0, y=0)\n\n    # banner_img = load_banner(BANNER_PATH)\n    # banner_img_label = ctk.CTkLabel(root, text=\"\", image=banner_img)\n    # banner_img_label.place(x=0, y=0)\n\n    first_name = get_name_label(name_input_frame, \"First\")\n    grid_position(first_name, 0, 0)\n\n    first_name_entry = get_entry_field(name_input_frame, \"First\")\n    grid_position(first_name_entry, 0, 1)\n\n    first_name_entry.focus()\n\n    last_name = get_name_label(name_input_frame, \"Last\")\n    grid_position(last_name, 1, 0)\n\n    last_name_entry = get_entry_field(name_input_frame, \"Last\")\n    grid_position(last_name_entry, 1, 1)\n\n    def proceed():\n        first_name = first_name_entry.get()\n        last_name = last_name_entry.get()\n        if first_name and last_name:\n            building_department_input(first_name, last_name)\n\n    name_button = make_button(name_input_frame, text=\"Next\", command=proceed)\n    name_button.grid(row=2, columnspan=2, pady=scale(STANDARD_PADY))\n\n    root.bind(\"&lt;Return&gt;\", lambda event: proceed())\n</code></pre>"},{"location":"#main.get_selection_label","title":"<code>get_selection_label(current_frame, selection)</code>","text":"<p>Create and returns a label widget prompting the user to select an option.</p> <p>Parameters:</p> Name Type Description Default <code>current_frame</code> <code>CTkFrame</code> <p>The frame in which the label will be                           placed.</p> required <code>selection</code> <code>str</code> <p>The option to be selected (e.g., \"Department\", \"Role\")              that will be displayed in the label.</p> required <p>Returns:</p> Type Description <code>CTkLabel</code> <p>ctk.CTkLabel: The created label widget with the prompt text and           styling.</p> Source code in <code>main.py</code> Python<pre><code>def get_selection_label(current_frame: ctk.CTkFrame,\n                        selection: str) -&gt; ctk.CTkLabel:\n    \"\"\"\n    Create and returns a label widget prompting the user to select an option.\n\n    Args:\n        current_frame (ctk.CTkFrame): The frame in which the label will be\n                                      placed.\n        selection (str): The option to be selected (e.g., \"Department\", \"Role\")\n                         that will be displayed in the label.\n\n    Returns:\n        ctk.CTkLabel: The created label widget with the prompt text and\n                      styling.\n    \"\"\"\n    text = f\"Select your {selection}:\"\n    label = ctk.CTkLabel(current_frame, text=text,\n                         font=get_font(STANDARD_FONT_SIZE))\n    label.pack(pady=scale(STANDARD_PADY), padx=scale(STANDARD_PADX))\n    return label\n</code></pre>"},{"location":"#main.get_dropdown","title":"<code>get_dropdown(current_frame, options_func)</code>","text":"<p>Create a dropdown menu with dynamically provided options.</p> <p>Parameters:</p> Name Type Description Default <code>current_frame</code> <code>CTkFrame</code> <p>Frame for the dropdown.</p> required <code>options_func</code> <code>Callable[[], list[str]]</code> <p>Function returning the options                                     list.</p> required <p>Returns:</p> Type Description <code>tuple[StringVar, CTkOptionMenu]</code> <p>tuple[ctk.StringVar, ctk.CTkOptionMenu]: StringVar and CTkOptionMenu                                      instance.</p> Source code in <code>main.py</code> Python<pre><code>def get_dropdown(current_frame: ctk.CTkFrame,\n                 options_func: Callable[[], list[str]]\n                 ) -&gt; tuple[ctk.StringVar, ctk.CTkOptionMenu]:\n    \"\"\"\n    Create a dropdown menu with dynamically provided options.\n\n    Args:\n        current_frame (ctk.CTkFrame): Frame for the dropdown.\n        options_func (Callable[[], list[str]]): Function returning the options\n                                                list.\n\n    Returns:\n        tuple[ctk.StringVar, ctk.CTkOptionMenu]: StringVar and CTkOptionMenu\n                                                 instance.\n    \"\"\"\n    dropdown_str_var = ctk.StringVar(current_frame)\n    options = options_func()\n    dropdown_str_var.set(options[0] if options else \"\")\n    dropdown = ctk.CTkOptionMenu(\n        current_frame, variable=dropdown_str_var, values=options)\n    dropdown.pack(pady=scale(STANDARD_PADY), padx=scale(20))\n    dropdown.configure(font=get_font(SMALL_FONT_SIZE))\n    return dropdown_str_var, dropdown\n</code></pre>"},{"location":"#main.building_department_input","title":"<code>building_department_input(first_name, last_name)</code>","text":"<p>Displays building and department selection, dynamically updating building options.</p> <p>Parameters:</p> Name Type Description Default <code>first_name</code> <code>str</code> <p>The user's first name</p> required <code>last_name</code> <code>str</code> <p>The user's last name</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This function does not return a value.</p> Source code in <code>main.py</code> Python<pre><code>def building_department_input(first_name: str, last_name: str) -&gt; None:\n    \"\"\"Displays building and department selection, dynamically updating\n    building options.\n\n    Args:\n        first_name (str): The user's first name\n        last_name (str): The user's last name\n\n    Returns:\n        None: This function does not return a value.\n    \"\"\"\n    clear_root()\n    building_department_frame = ctk.CTkFrame(root)\n    building_department_frame.pack(expand=True)\n\n    get_selection_label(building_department_frame, \"department\")\n\n    department_str_var = get_dropdown(\n        building_department_frame, lambda: list(DEPARTMENTS.keys()))[0]\n\n    def get_building_options():\n        department = department_str_var.get()\n        return DEPARTMENT_BUILDINGS.get(department, BUILDINGS)\n\n    get_selection_label(building_department_frame, \"building\")\n\n    building_str_var, building_dropdown = get_dropdown(\n        building_department_frame, get_building_options)\n\n    def update_building_dropdown(*args):  # pylint: disable=W0613\n        building_dropdown.configure(values=get_building_options())\n        if get_building_options():\n            building_str_var.set(get_building_options()[0])\n\n    department_str_var.trace_add(\"write\", update_building_dropdown)\n\n    def proceed():\n        building = building_str_var.get()\n        if department_str_var.get() and building:\n            save_input(first_name, last_name,\n                       department_str_var.get(), building)\n\n    submit_button = make_button(\n        building_department_frame, text=\"Submit\", command=proceed)\n    root.bind(\"&lt;Return&gt;\", lambda event: proceed())\n    submit_button.pack(pady=scale(STANDARD_PADY), padx=scale(STANDARD_PADX))\n</code></pre>"},{"location":"#main.save_input","title":"<code>save_input(first_name, last_name, department, building)</code>","text":"<p>Save the user's input (name, building, department) to a text file and performs a system action.</p> <p>The function appends the provided user input, along with the current timestamp, to a file. It also executes a system command and then quits the program.</p> <p>Parameters:</p> Name Type Description Default <code>first_name</code> <code>str</code> <p>The user's first name.</p> required <code>last_name</code> <code>str</code> <p>The user's last name.</p> required <code>building</code> <code>str</code> <p>The selected building.</p> required <code>department</code> <code>str</code> <p>The selected department.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This function does not return a value.</p> Source code in <code>main.py</code> Python<pre><code>def save_input(first_name: str, last_name: str,\n               department: str, building: str) -&gt; None:\n    \"\"\"\n    Save the user's input (name, building, department) to a text file\n    and performs a system action.\n\n    The function appends the provided user input, along with the current\n    timestamp, to a file. It also executes a system command and then quits the\n    program.\n\n    Args:\n        first_name (str): The user's first name.\n        last_name (str): The user's last name.\n        building (str): The selected building.\n        department (str): The selected department.\n\n    Returns:\n        None: This function does not return a value.\n    \"\"\"\n    current_time = strftime(\"%Y-%m-%d %H:%M:%S\")\n    command = f'/usr/bin/say \"{first_name} {last_name}\"'\n    # command = (\n    #     f'sudo /usr/bin/jamf recon -realname \"{first_name} {last_name}\"'\n    #     f' -building \"{building}\"'\n    #     # f' -department {DEPARTMENTS[department]}'\n    # )\n\n    # jamf command:\n    # /usr/local/bin/jamf recon [flags]\n    # -realname [str]     '-realname \"[first name] [last name]\"'\n    # -email [str]        '-email [unityID]@ncsu.edu'\n    # -building [str]     '-building [SOMETHING Hall]'\n    # -room [str]         '-room NCSU-[buidling]-####'\n    # -department [str]   '-department NCSU-COS-[department]'\n\n    formatted_information = (\n        f\"{current_time} - {first_name} {last_name}\"\n        f\" - {building} - {DEPARTMENTS[department]} ({department})\\n\"\n    )\n\n    with open(\"info_log.txt\", \"a\", encoding=\"utf-8\") as f:\n        f.write(formatted_information)\n\n    subprocess.run([\"bash\", \"-c\", command], check=False)\n    root.destroy()\n</code></pre>"}]}